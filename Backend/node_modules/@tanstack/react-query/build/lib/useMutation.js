'use client';
'use strict';

var React = require('react');
var queryCore = require('@tanstack/query-core');
var QueryClientProvider = require('./QueryClientProvider.js');
var utils = require('./utils.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

// HOOK

function useMutation(options, queryClient) {
  const client = QueryClientProvider.useQueryClient(queryClient);
  const [observer] = React__namespace.useState(() => new queryCore.MutationObserver(client, options));
  React__namespace.useEffect(() => {
    observer.setOptions(options);
  }, [observer, options]);
  const result = React__namespace.useSyncExternalStore(React__namespace.useCallback(onStoreChange => observer.subscribe(queryCore.notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  const mutate = React__namespace.useCallback((variables, mutateOptions) => {
    observer.mutate(variables, mutateOptions).catch(noop);
  }, [observer]);
  if (result.error && utils.shouldThrowError(observer.options.throwOnError, [result.error])) {
    throw result.error;
  }
  return {
    ...result,
    mutate,
    mutateAsync: result.mutate
  };
}

// eslint-disable-next-line @typescript-eslint/no-empty-function
function noop() {}

exports.useMutation = useMutation;
//# sourceMappingURL=useMutation.js.map
