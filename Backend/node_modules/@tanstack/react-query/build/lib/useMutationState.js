'use client';
'use strict';

var React = require('react');
var queryCore = require('@tanstack/query-core');
var QueryClientProvider = require('./QueryClientProvider.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

function useIsMutating(filters, queryClient) {
  const client = QueryClientProvider.useQueryClient(queryClient);
  return useMutationState({
    filters: {
      ...filters,
      status: 'pending'
    }
  }, client).length;
}
function getResult(mutationCache, options) {
  return mutationCache.findAll(options.filters).map(mutation => options.select ? options.select(mutation) : mutation.state);
}
function useMutationState(options = {}, queryClient) {
  const mutationCache = QueryClientProvider.useQueryClient(queryClient).getMutationCache();
  const optionsRef = React__namespace.useRef(options);
  const result = React__namespace.useRef();
  if (!result.current) {
    result.current = getResult(mutationCache, options);
  }
  React__namespace.useEffect(() => {
    optionsRef.current = options;
  });
  return React__namespace.useSyncExternalStore(React__namespace.useCallback(onStoreChange => mutationCache.subscribe(() => {
    const nextResult = queryCore.replaceEqualDeep(result.current, getResult(mutationCache, optionsRef.current));
    if (result.current !== nextResult) {
      result.current = nextResult;
      queryCore.notifyManager.schedule(onStoreChange);
    }
  }), [mutationCache]), () => result.current, () => result.current);
}

exports.useIsMutating = useIsMutating;
exports.useMutationState = useMutationState;
//# sourceMappingURL=useMutationState.js.map
