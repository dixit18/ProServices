/// <reference types="node" />
import * as React from 'react';
import { render } from '@testing-library/react';
import type { QueryClientConfig } from '..';
import { QueryClient } from '..';
export declare function renderWithClient(client: QueryClient, ui: React.ReactElement): ReturnType<typeof render>;
export declare const Blink: ({ duration, children, }: {
    duration: number;
    children: React.ReactNode;
}) => JSX.Element;
export declare function createQueryClient(config?: QueryClientConfig): QueryClient;
export declare function mockVisibilityState(value: DocumentVisibilityState): import("vitest/dist/index-2dd51af4").S<[], DocumentVisibilityState>;
export declare function mockNavigatorOnLine(value: boolean): import("vitest/dist/index-2dd51af4").S<[], boolean>;
export declare function queryKey(): Array<string>;
export declare function sleep(timeout: number): Promise<void>;
export declare function setActTimeout(fn: () => void, ms?: number): NodeJS.Timeout;
/**
 * Assert the parameter is of a specific type.
 */
export declare function expectType<T>(_: T): void;
export type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? true : false;
export type Expect<T extends true> = T;
/**
 * Assert the parameter is not typed as `any`
 */
export declare function expectTypeNotAny<T>(_: 0 extends 1 & T ? never : T): void;
export declare function setIsServer(isServer: boolean): () => void;
export declare const doNotExecute: (_func: () => void) => boolean;
//# sourceMappingURL=utils.d.ts.map