{"version":3,"file":"retryer.js","sources":["../../src/retryer.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport type { CancelOptions, NetworkMode, DefaultError } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n"],"names":["defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","onlineManager","isOnline","CancelledError","constructor","options","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","Promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","focusManager","isFocused","resolve","onSuccess","onError","pause","continueResolve","canContinue","onPause","then","undefined","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","sleep","continue","didContinue"],"mappings":"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"}