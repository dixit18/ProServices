'use strict';

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var notifyManager = require('./notifyManager.js');
var queryObserver = require('./queryObserver.js');
var subscribable = require('./subscribable.js');
var utils = require('./utils.js');

function difference(array1, array2) {
  return array1.filter(x => array2.indexOf(x) === -1);
}
function replaceAt(array, index, value) {
  const copy = array.slice(0);
  copy[index] = value;
  return copy;
}
var _client = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("client");
var _result = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("result");
var _queries = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("queries");
var _observers = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("observers");
var _options = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("options");
var _combinedResult = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("combinedResult");
var _setResult = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("setResult");
var _combineResult = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("combineResult");
var _findMatchingObservers = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("findMatchingObservers");
var _onUpdate = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("onUpdate");
var _notify = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("notify");
class QueriesObserver extends subscribable.Subscribable {
  constructor(client, _queries2, _options2) {
    super();
    Object.defineProperty(this, _notify, {
      value: _notify2
    });
    Object.defineProperty(this, _onUpdate, {
      value: _onUpdate2
    });
    Object.defineProperty(this, _findMatchingObservers, {
      value: _findMatchingObservers2
    });
    Object.defineProperty(this, _combineResult, {
      value: _combineResult2
    });
    Object.defineProperty(this, _setResult, {
      value: _setResult2
    });
    Object.defineProperty(this, _client, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _result, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _queries, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _observers, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _options, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _combinedResult, {
      writable: true,
      value: void 0
    });
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _client)[_client] = client;
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries] = [];
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers] = [];
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _setResult)[_setResult]([]);
    this.setQueries(_queries2, _options2);
  }
  onSubscribe() {
    if (this.listeners.size === 1) {
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers].forEach(observer => {
        observer.subscribe(result => {
          _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _onUpdate)[_onUpdate](observer, result);
        });
      });
    }
  }
  onUnsubscribe() {
    if (!this.listeners.size) {
      this.destroy();
    }
  }
  destroy() {
    this.listeners = new Set();
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers].forEach(observer => {
      observer.destroy();
    });
  }
  setQueries(queries, options, notifyOptions) {
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries] = queries;
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _options)[_options] = options;
    notifyManager.notifyManager.batch(() => {
      const prevObservers = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers];
      const newObserverMatches = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _findMatchingObservers)[_findMatchingObservers](_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries]);

      // set options for the new observers to notify of changes
      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));
      const newObservers = newObserverMatches.map(match => match.observer);
      const newResult = newObservers.map(observer => observer.getCurrentResult());
      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);
      if (prevObservers.length === newObservers.length && !hasIndexChange) {
        return;
      }
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers] = newObservers;
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _setResult)[_setResult](newResult);
      if (!this.hasListeners()) {
        return;
      }
      difference(prevObservers, newObservers).forEach(observer => {
        observer.destroy();
      });
      difference(newObservers, prevObservers).forEach(observer => {
        observer.subscribe(result => {
          _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _onUpdate)[_onUpdate](observer, result);
        });
      });
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _notify)[_notify]();
    });
  }
  getCurrentResult() {
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _combinedResult)[_combinedResult];
  }
  getQueries() {
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers].map(observer => observer.getCurrentQuery());
  }
  getObservers() {
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers];
  }
  getOptimisticResult(queries) {
    const matches = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _findMatchingObservers)[_findMatchingObservers](queries);
    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));
    return [result, r => {
      return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _combineResult)[_combineResult](r != null ? r : result);
    }, () => {
      return matches.map((match, index) => {
        const observerResult = result[index];
        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult) : observerResult;
      });
    }];
  }
}
function _setResult2(value) {
  _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _result)[_result] = value;
  _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _combinedResult)[_combinedResult] = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _combineResult)[_combineResult](value);
}
function _combineResult2(input) {
  var _classPrivateFieldLoo;
  const combine = (_classPrivateFieldLoo = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _options)[_options]) == null ? void 0 : _classPrivateFieldLoo.combine;
  if (combine) {
    return utils.replaceEqualDeep(_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _combinedResult)[_combinedResult], combine(input));
  }
  return input;
}
function _findMatchingObservers2(queries) {
  const prevObservers = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers];
  const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));
  const defaultedQueryOptions = queries.map(options => _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _client)[_client].defaultQueryOptions(options));
  const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {
    const match = prevObserversMap.get(defaultedOptions.queryHash);
    if (match != null) {
      return [{
        defaultedQueryOptions: defaultedOptions,
        observer: match
      }];
    }
    return [];
  });
  const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));
  const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));
  const getObserver = options => {
    const defaultedOptions = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _client)[_client].defaultQueryOptions(options);
    const currentObserver = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers].find(o => o.options.queryHash === defaultedOptions.queryHash);
    return currentObserver != null ? currentObserver : new queryObserver.QueryObserver(_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _client)[_client], defaultedOptions);
  };
  const newOrReusedObservers = unmatchedQueries.map(options => {
    return {
      defaultedQueryOptions: options,
      observer: getObserver(options)
    };
  });
  const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);
  return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);
}
function _onUpdate2(observer, result) {
  const index = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _observers)[_observers].indexOf(observer);
  if (index !== -1) {
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _setResult)[_setResult](replaceAt(_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _result)[_result], index, result));
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _notify)[_notify]();
  }
}
function _notify2() {
  notifyManager.notifyManager.batch(() => {
    this.listeners.forEach(listener => {
      listener(_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _result)[_result]);
    });
  });
}

exports.QueriesObserver = QueriesObserver;
//# sourceMappingURL=queriesObserver.js.map
