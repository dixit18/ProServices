'use strict';

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var utils = require('./utils.js');
var query = require('./query.js');
var notifyManager = require('./notifyManager.js');
var subscribable = require('./subscribable.js');

var _queries = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("queries");
// CLASS

class QueryCache extends subscribable.Subscribable {
  constructor(config = {}) {
    super();
    Object.defineProperty(this, _queries, {
      writable: true,
      value: void 0
    });
    this.config = config;
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries] = new Map();
  }
  build(client, options, state) {
    var _options$queryHash;
    const queryKey = options.queryKey;
    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : utils.hashQueryKeyByOptions(queryKey, options);
    let query$1 = this.get(queryHash);
    if (!query$1) {
      query$1 = new query.Query({
        cache: this,
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey)
      });
      this.add(query$1);
    }
    return query$1;
  }
  add(query) {
    if (!_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries].has(query.queryHash)) {
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries].set(query.queryHash, query);
      this.notify({
        type: 'added',
        query
      });
    }
  }
  remove(query) {
    const queryInMap = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries].get(query.queryHash);
    if (queryInMap) {
      query.destroy();
      if (queryInMap === query) {
        _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries].delete(query.queryHash);
      }
      this.notify({
        type: 'removed',
        query
      });
    }
  }
  clear() {
    notifyManager.notifyManager.batch(() => {
      this.getAll().forEach(query => {
        this.remove(query);
      });
    });
  }
  get(queryHash) {
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries].get(queryHash);
  }
  getAll() {
    return [..._rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _queries)[_queries].values()];
  }
  find(filters) {
    const defaultedFilters = {
      exact: true,
      ...filters
    };
    return this.getAll().find(query => utils.matchQuery(defaultedFilters, query));
  }
  findAll(filters = {}) {
    const queries = this.getAll();
    return Object.keys(filters).length > 0 ? queries.filter(query => utils.matchQuery(filters, query)) : queries;
  }
  notify(event) {
    notifyManager.notifyManager.batch(() => {
      this.listeners.forEach(listener => {
        listener(event);
      });
    });
  }
  onFocus() {
    notifyManager.notifyManager.batch(() => {
      this.getAll().forEach(query => {
        query.onFocus();
      });
    });
  }
  onOnline() {
    notifyManager.notifyManager.batch(() => {
      this.getAll().forEach(query => {
        query.onOnline();
      });
    });
  }
}

exports.QueryCache = QueryCache;
//# sourceMappingURL=queryCache.js.map
