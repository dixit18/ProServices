import { notifyManager } from './notifyManager.mjs';
import { Mutation } from './mutation.mjs';
import { matchMutation, noop } from './utils.mjs';
import { Subscribable } from './subscribable.mjs';

// TYPES

// CLASS

class MutationCache extends Subscribable {
  #mutations;
  #mutationId;
  #resuming;
  constructor(config = {}) {
    super();
    this.config = config;
    this.#mutations = [];
    this.#mutationId = 0;
  }
  build(client, options, state) {
    const mutation = new Mutation({
      mutationCache: this,
      mutationId: ++this.#mutationId,
      options: client.defaultMutationOptions(options),
      state
    });
    this.add(mutation);
    return mutation;
  }
  add(mutation) {
    this.#mutations.push(mutation);
    this.notify({
      type: 'added',
      mutation
    });
  }
  remove(mutation) {
    this.#mutations = this.#mutations.filter(x => x !== mutation);
    this.notify({
      type: 'removed',
      mutation
    });
  }
  clear() {
    notifyManager.batch(() => {
      this.#mutations.forEach(mutation => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return this.#mutations;
  }
  find(filters) {
    const defaultedFilters = {
      exact: true,
      ...filters
    };
    return this.#mutations.find(mutation => matchMutation(defaultedFilters, mutation));
  }
  findAll(filters = {}) {
    return this.#mutations.filter(mutation => matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(listener => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    this.#resuming = (this.#resuming ?? Promise.resolve()).then(() => {
      const pausedMutations = this.#mutations.filter(x => x.state.isPaused);
      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));
    }).then(() => {
      this.#resuming = undefined;
    });
    return this.#resuming;
  }
}

export { MutationCache };
//# sourceMappingURL=mutationCache.mjs.map
