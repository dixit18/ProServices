import type { QueryObserverOptions, QueryObserverResult } from './types';
import type { QueryClient } from './queryClient';
import type { NotifyOptions } from './queryObserver';
import { QueryObserver } from './queryObserver';
import { Subscribable } from './subscribable';
type QueriesObserverListener = (result: QueryObserverResult[]) => void;
export interface QueriesObserverOptions<TCombinedResult = QueryObserverResult[]> {
    combine?: (result: QueryObserverResult[]) => TCombinedResult;
}
export declare class QueriesObserver<TCombinedResult = QueryObserverResult[]> extends Subscribable<QueriesObserverListener> {
    #private;
    constructor(client: QueryClient, queries: QueryObserverOptions[], options?: QueriesObserverOptions<TCombinedResult>);
    protected onSubscribe(): void;
    protected onUnsubscribe(): void;
    destroy(): void;
    setQueries(queries: QueryObserverOptions[], options?: QueriesObserverOptions<TCombinedResult>, notifyOptions?: NotifyOptions): void;
    getCurrentResult(): TCombinedResult;
    getQueries(): import("./query").Query<unknown, Error, unknown, import("./types").QueryKey>[];
    getObservers(): QueryObserver<unknown, Error, unknown, unknown, import("./types").QueryKey>[];
    getOptimisticResult(queries: QueryObserverOptions[]): [
        rawResult: QueryObserverResult[],
        combineResult: (r?: QueryObserverResult[]) => TCombinedResult,
        trackResult: () => QueryObserverResult[]
    ];
}
export {};
//# sourceMappingURL=queriesObserver.d.ts.map