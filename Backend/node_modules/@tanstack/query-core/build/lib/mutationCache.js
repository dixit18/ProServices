'use strict';

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var notifyManager = require('./notifyManager.js');
var mutation = require('./mutation.js');
var utils = require('./utils.js');
var subscribable = require('./subscribable.js');

// TYPES
var _mutations = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("mutations");
var _mutationId = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("mutationId");
var _resuming = /*#__PURE__*/_rollupPluginBabelHelpers.classPrivateFieldLooseKey("resuming");
// CLASS

class MutationCache extends subscribable.Subscribable {
  constructor(config = {}) {
    super();
    Object.defineProperty(this, _mutations, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _mutationId, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _resuming, {
      writable: true,
      value: void 0
    });
    this.config = config;
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations] = [];
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutationId)[_mutationId] = 0;
  }
  build(client, options, state) {
    const mutation$1 = new mutation.Mutation({
      mutationCache: this,
      mutationId: ++_rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutationId)[_mutationId],
      options: client.defaultMutationOptions(options),
      state
    });
    this.add(mutation$1);
    return mutation$1;
  }
  add(mutation) {
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations].push(mutation);
    this.notify({
      type: 'added',
      mutation
    });
  }
  remove(mutation) {
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations] = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations].filter(x => x !== mutation);
    this.notify({
      type: 'removed',
      mutation
    });
  }
  clear() {
    notifyManager.notifyManager.batch(() => {
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations].forEach(mutation => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations];
  }
  find(filters) {
    const defaultedFilters = {
      exact: true,
      ...filters
    };
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations].find(mutation => utils.matchMutation(defaultedFilters, mutation));
  }
  findAll(filters = {}) {
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations].filter(mutation => utils.matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.notifyManager.batch(() => {
      this.listeners.forEach(listener => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    var _classPrivateFieldLoo;
    _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _resuming)[_resuming] = ((_classPrivateFieldLoo = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _resuming)[_resuming]) != null ? _classPrivateFieldLoo : Promise.resolve()).then(() => {
      const pausedMutations = _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _mutations)[_mutations].filter(x => x.state.isPaused);
      return notifyManager.notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(utils.noop)), Promise.resolve()));
    }).then(() => {
      _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _resuming)[_resuming] = undefined;
    });
    return _rollupPluginBabelHelpers.classPrivateFieldLooseBase(this, _resuming)[_resuming];
  }
}

exports.MutationCache = MutationCache;
//# sourceMappingURL=mutationCache.js.map
