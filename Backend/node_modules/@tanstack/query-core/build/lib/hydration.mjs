// TYPES

// FUNCTIONS

function dehydrateMutation(mutation) {
  return {
    mutationKey: mutation.options.mutationKey,
    state: mutation.state
  };
}

// Most config is not dehydrated but instead meant to configure again when
// consuming the de/rehydrated data, typically with useQuery on the client.
// Sometimes it might make sense to prefetch data on the server and include
// in the html-payload, but not consume it on the initial render.
function dehydrateQuery(query) {
  return {
    state: query.state,
    queryKey: query.queryKey,
    queryHash: query.queryHash
  };
}
function defaultShouldDehydrateMutation(mutation) {
  return mutation.state.isPaused;
}
function defaultShouldDehydrateQuery(query) {
  return query.state.status === 'success';
}
function dehydrate(client, options = {}) {
  const filterMutation = options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;
  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);
  const filterQuery = options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;
  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query)] : []);
  return {
    mutations,
    queries
  };
}
function hydrate(client, dehydratedState, options) {
  if (typeof dehydratedState !== 'object' || dehydratedState === null) {
    return;
  }
  const mutationCache = client.getMutationCache();
  const queryCache = client.getQueryCache();

  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  const mutations = dehydratedState.mutations || [];
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  const queries = dehydratedState.queries || [];
  mutations.forEach(dehydratedMutation => {
    mutationCache.build(client, {
      ...options?.defaultOptions?.mutations,
      mutationKey: dehydratedMutation.mutationKey
    }, dehydratedMutation.state);
  });
  queries.forEach(dehydratedQuery => {
    const query = queryCache.get(dehydratedQuery.queryHash);

    // Reset fetch status to idle in the dehydrated state to avoid
    // query being stuck in fetching state upon hydration
    const dehydratedQueryState = {
      ...dehydratedQuery.state,
      fetchStatus: 'idle'
    };

    // Do not hydrate if an existing query exists with newer data
    if (query) {
      if (query.state.dataUpdatedAt < dehydratedQueryState.dataUpdatedAt) {
        query.setState(dehydratedQueryState);
      }
      return;
    }

    // Restore query
    queryCache.build(client, {
      ...options?.defaultOptions?.queries,
      queryKey: dehydratedQuery.queryKey,
      queryHash: dehydratedQuery.queryHash
    }, dehydratedQueryState);
  });
}

export { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };
//# sourceMappingURL=hydration.mjs.map
