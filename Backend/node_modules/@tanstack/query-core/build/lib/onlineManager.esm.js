import { classPrivateFieldLooseBase as _classPrivateFieldLooseBase, classPrivateFieldLooseKey as _classPrivateFieldLooseKey } from './_virtual/_rollupPluginBabelHelpers.esm.js';
import { Subscribable } from './subscribable.esm.js';
import { isServer } from './utils.esm.js';

var _online = /*#__PURE__*/_classPrivateFieldLooseKey("online");
var _cleanup = /*#__PURE__*/_classPrivateFieldLooseKey("cleanup");
var _setup = /*#__PURE__*/_classPrivateFieldLooseKey("setup");
class OnlineManager extends Subscribable {
  constructor() {
    super();
    Object.defineProperty(this, _online, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _cleanup, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _setup, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _setup)[_setup] = onOnline => {
      // addEventListener does not exist in React Native, but window does
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        // Listen to online
        window.addEventListener('online', listener, false);
        window.addEventListener('offline', listener, false);
        return () => {
          // Be sure to unsubscribe if a new handler is set
          window.removeEventListener('online', listener);
          window.removeEventListener('offline', listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!_classPrivateFieldLooseBase(this, _cleanup)[_cleanup]) {
      this.setEventListener(_classPrivateFieldLooseBase(this, _setup)[_setup]);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _classPrivateFieldLoo, _classPrivateFieldLoo2;
      (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _cleanup))[_cleanup]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2);
      _classPrivateFieldLooseBase(this, _cleanup)[_cleanup] = undefined;
    }
  }
  setEventListener(setup) {
    var _classPrivateFieldLoo3, _classPrivateFieldLoo4;
    _classPrivateFieldLooseBase(this, _setup)[_setup] = setup;
    (_classPrivateFieldLoo3 = (_classPrivateFieldLoo4 = _classPrivateFieldLooseBase(this, _cleanup))[_cleanup]) == null ? void 0 : _classPrivateFieldLoo3.call(_classPrivateFieldLoo4);
    _classPrivateFieldLooseBase(this, _cleanup)[_cleanup] = setup(online => {
      if (typeof online === 'boolean') {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    _classPrivateFieldLooseBase(this, _online)[_online] = online;
    if (online) {
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(listener => {
      listener();
    });
  }
  isOnline() {
    if (typeof _classPrivateFieldLooseBase(this, _online)[_online] === 'boolean') {
      return _classPrivateFieldLooseBase(this, _online)[_online];
    }
    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {
      return true;
    }
    return navigator.onLine;
  }
}
const onlineManager = new OnlineManager();

export { OnlineManager, onlineManager };
//# sourceMappingURL=onlineManager.esm.js.map
