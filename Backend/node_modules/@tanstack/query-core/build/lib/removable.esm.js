import { classPrivateFieldLooseBase as _classPrivateFieldLooseBase, classPrivateFieldLooseKey as _classPrivateFieldLooseKey } from './_virtual/_rollupPluginBabelHelpers.esm.js';
import { isValidTimeout, isServer } from './utils.esm.js';

var _gcTimeout = /*#__PURE__*/_classPrivateFieldLooseKey("gcTimeout");
class Removable {
  constructor() {
    Object.defineProperty(this, _gcTimeout, {
      writable: true,
      value: void 0
    });
  }
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout();
    if (isValidTimeout(this.gcTime)) {
      _classPrivateFieldLooseBase(this, _gcTimeout)[_gcTimeout] = setTimeout(() => {
        this.optionalRemove();
      }, this.gcTime);
    }
  }
  updateGcTime(newGcTime) {
    // Default to 5 minutes (Infinity for server-side) if no gcTime is set
    this.gcTime = Math.max(this.gcTime || 0, newGcTime != null ? newGcTime : isServer ? Infinity : 5 * 60 * 1000);
  }
  clearGcTimeout() {
    if (_classPrivateFieldLooseBase(this, _gcTimeout)[_gcTimeout]) {
      clearTimeout(_classPrivateFieldLooseBase(this, _gcTimeout)[_gcTimeout]);
      _classPrivateFieldLooseBase(this, _gcTimeout)[_gcTimeout] = undefined;
    }
  }
}

export { Removable };
//# sourceMappingURL=removable.esm.js.map
