import { Subscribable } from './subscribable.mjs';
import { isServer } from './utils.mjs';

class OnlineManager extends Subscribable {
  #online;
  #cleanup;
  #setup;
  constructor() {
    super();
    this.#setup = onOnline => {
      // addEventListener does not exist in React Native, but window does
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        // Listen to online
        window.addEventListener('online', listener, false);
        window.addEventListener('offline', listener, false);
        return () => {
          // Be sure to unsubscribe if a new handler is set
          window.removeEventListener('online', listener);
          window.removeEventListener('offline', listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.#cleanup) {
      this.setEventListener(this.#setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.#cleanup?.();
      this.#cleanup = undefined;
    }
  }
  setEventListener(setup) {
    this.#setup = setup;
    this.#cleanup?.();
    this.#cleanup = setup(online => {
      if (typeof online === 'boolean') {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    this.#online = online;
    if (online) {
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(listener => {
      listener();
    });
  }
  isOnline() {
    if (typeof this.#online === 'boolean') {
      return this.#online;
    }
    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {
      return true;
    }
    return navigator.onLine;
  }
}
const onlineManager = new OnlineManager();

export { OnlineManager, onlineManager };
//# sourceMappingURL=onlineManager.mjs.map
